#!/bin/bash

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_sha
do
	if [ "$local_sha" = $z40 ]
	then
		# Handle delete
		:
	else
		if [ "$remote_sha" = $z40 ]
		then
			# New branch, examine all commits
			range="$local_sha"
		else
			# Update to existing branch, examine new commits
			range="$remote_sha..$local_sha"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if [ -n "$commit" ]
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

# Check if pushing to a protected branch.
protected_branches=('main' 'master')
current_branch=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')

for protected_branch in "${protected_branches[@]}"
do
  if [ "$current_branch" = "$protected_branch" ]; then
      read -p "You're about to push to a protected branch \"${protected_branch}\", is that what you intended? [y|n] " -n 1 -r < /dev/tty
      echo
      if echo "$REPLY" | grep -E '^[Yy]$' > /dev/null; then
          exit 0 # push will execute
      fi
      exit 1 # push will not execute
  else
      exit 0 # push will execute
  fi
done
exit 1
exit 0
